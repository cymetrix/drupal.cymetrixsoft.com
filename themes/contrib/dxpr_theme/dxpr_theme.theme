<?php
use Drupal\node\Entity\Node;
use Drupal\block\Entity\Block;
use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Template\Attribute;
use Drupal\node\NodeInterface;


use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Url;




use Drupal\Core\Cache\Cache;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_preprocess_page().
 */









function dxpr_theme_library_info_alter(&$libraries, $extension) {
  if ($extension == 'dxpr_theme') {
    // Manage dxpr_theme themesettings CSS.
    $current_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
    $key = 'public://dxpr_theme/css/themesettings-' . $current_theme . '.css';
    if (\Drupal::service('file_system')->realpath($key)) {
      $libraries['global-styling']['css']['theme'][$key] = [
        'minified' => FALSE,
        'weight' => 5,
      ];
    }
    // Subthemes dxpr_theme.css.
    if ($current_theme !== 'dxpr_theme') {
      // Subthemes carry their own copy of dxpr_theme.css,
      // disable dxpr_theme/css/dxpr_theme.css.
      unset($libraries['global-styling']['css']['theme']['css/dxpr_theme.css']);
    }
  }
}

/**
 * Prepares variables for the all templates. Theme settings.
 */
function dxpr_theme_preprocess(&$variables, $hook, $info) {
  $theme = \Drupal::theme()
    ->getActiveTheme()
    ->getName();
  $variables['theme']['settings'] = \Drupal::config($theme . '.settings')->get();
}

/**
 * Prepares variables for the html template. Adds node object.
 *
 * Default template: html.html.twig.
 *
 * See the html.html.twig template for the list of variables.
 */
function dxpr_theme_preprocess_html(&$variables) {

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $variables['node'] = $node;
  }

  foreach (\Drupal::routeMatch()->getParameters() as $parameter) {
    if ($parameter instanceof ContentEntityInterface) {
      $variables['attributes']['class'][] = Html::getClass('page-' . $parameter->getEntityTypeId() . '-' . $parameter->id());
      break;
    }
  }

  // Body background image.
  if (array_key_exists('node', $variables)) {
    $node = $variables['node'];

    if (isset($node) && !is_string($node)) {
      if ($node->hasField('field_dth_body_background')) {
        $data = $node->field_dth_body_background->view([
          'label' => 'hidden',
          'type' => 'image_url',
        ]);
        if (isset($data[0]['#markup'])) {
          $variables['body_bg_image_path'] = $data[0]['#markup'];
        }
      }
    }
  }

  // Load Sooper Features Controllers.
  $dxprThemePath = \Drupal::service('extension.list.theme')->getPath('dxpr_theme');
  foreach (\Drupal::service('file_system')->scanDirectory($dxprThemePath . '/features', '/controller.inc/i') as $file) {
    require_once $file->uri;
    $function_name = basename($file->filename, '.inc');
    $function_name = str_replace('-', '_', $function_name);
    if (function_exists($function_name)) {
      $function_name($variables);
    }
  }

  if ($custom_js = theme_get_setting('custom_javascript_site')) {
    $custom_js = Markup::create($custom_js);
    $variables['page_bottom']['custom_javascript_site'] = [
      '#markup' => $custom_js,
    ];
  }
  $variables['page_bottom']['custom_javascript'] = [
    '#markup' => '<div class="hidden" id="dxpr-theme-js-seed">sfy39587stp18</div>',
  ];

  if ($breadcrumbs_separator = theme_get_setting('page_title_breadcrumbs_separator')) {
    $variables['#attached']['drupalSettings']['dxpr_themeSettings']['breadcrumbsSeparator'] = $breadcrumbs_separator;
  }

  if ($header_height = theme_get_setting('header_top_height')) {
    $variables['#attached']['drupalSettings']['dxpr_themeSettings']['headerHeight'] = $header_height;
  }

  if ($header_scroll_offset = theme_get_setting('header_top_height_sticky_offset')) {
    $variables['#attached']['drupalSettings']['dxpr_themeSettings']['headerOffset'] = $header_scroll_offset;
  }

  // Fixed mobile header.
  if ($header_mobile_fixed = theme_get_setting('header_mobile_fixed')) {
    $variables['#attached']['drupalSettings']['dxpr_themeSettings']['headerMobileFixed'] = $header_mobile_fixed;
  }
  // Mobile header height.
  if ($header_mobile_height = theme_get_setting('header_mobile_height')) {
    $variables['#attached']['drupalSettings']['dxpr_themeSettings']['headerMobileHeight'] = $header_mobile_height;
  }

  if ($header_menu_direction = ((theme_get_setting('header_side_direction') !== NULL)) ? theme_get_setting('header_side_direction') : 'left') {
    $variables['#attached']['drupalSettings']['dxpr_themeSettings']['headerSideDirection'] = $header_menu_direction;
  }

  // Second header sticky.
  if ($second_header_sticky = theme_get_setting('second_header_sticky')) {
    $variables['#attached']['drupalSettings']['dxpr_themeSettings']['secondHeaderSticky'] = $second_header_sticky;
  }

  // Menu hamburger animation.
  if ($header_hamburger_animation = theme_get_setting('hamburger_animation')) {
    $variables['#attached']['drupalSettings']['dxpr_themeSettings']['hamburgerAnimation'] = $header_hamburger_animation;
  }
}

/**
 * Implements template_preprocess_page()
 */
function dxpr_theme_preprocess_page_default(&$variables) {
  $variables['navbar_attributes'] = [
    'class' => ['navbar'],
    'id' => ['navbar'],
    'role' => ['banner'],
  ];
  $variables['navbar_attributes'] = new Attribute($variables['navbar_attributes']);

  $hide_regions = $local_hide = [];
  if (theme_get_setting('hidden_regions') && !empty(array_keys(array_filter(theme_get_setting('hidden_regions'))))) {
    $hide_regions = array_keys(array_filter(theme_get_setting('hidden_regions')));
  }
  if (!empty($variables['node'])
    && $variables['node'] instanceof NodeInterface
    && $variables['node']->hasField('field_dth_hide_regions')) {
    $local_hide = array_column($variables['node']->get('field_dth_hide_regions')->getValue(), 'value');
    $hide_regions = array_unique(array_merge($hide_regions, $local_hide));
  }
  if (in_array('navigation', $hide_regions)) {
    $hide_regions[] = 'navigation_collapsible';
  }
  if (in_array('header', $hide_regions)) {
    $hide_regions[] = 'navigation_collapsible';
    $hide_regions[] = 'navigation';
  }
  foreach ($hide_regions as $value) {
    if (!empty($variables['page'][$value])) {
      unset($variables['page'][$value]);
    }
  }

  // Title background image.
  if (array_key_exists('node', $variables)) {
    $node = $variables['node'];

    if (isset($node) && !is_string($node)) {
      if ($node->hasField('field_dth_page_title_backgrou')) {
        $data = $node->field_dth_page_title_backgrou->view([
          'label' => 'hidden',
          'type' => 'image_url',
        ]);
        if (isset($data[0]['#markup'])) {
          $variables['title_bg_image_path'] = $data[0]['#markup'];
        }
      }
    }
  }

  // CSS to load on every page.
  $dxpr_theme_libraries = [
    // Bootstrap TAILORING.
    'dxpr_theme/bootstrap-3',
    'dxpr_theme/bootstrap-theme',
  // @todo include only if needed.
    'dxpr_theme/jquery-ui',
    // DXPR THEME BASE.
    'dxpr_theme/forms',
    'dxpr_theme/layout',
    'dxpr_theme/page-title',
    'dxpr_theme/typography',
    // DXPR THEME Components  //@todo: include only if needed.
    'dxpr_theme/dxpr-theme-header--side',
    'dxpr_theme/admin',
    // Overrides   //@todo: include only if needed.
    'dxpr_theme/drupal-webform',
    'dxpr_theme/dxpr-theme-builder',
    // HELPERS.
    'dxpr_theme/helper-classes',
  ];
  foreach ($dxpr_theme_libraries as $dxpr_theme_library) {
    $variables['#attached']['library'][] = $dxpr_theme_library;
  }
}

/**
 * Implements template_menu_local_tasks()
 */
function dxpr_theme_preprocess_menu_local_tasks(&$variables) {
  if ($variables['secondary']) {
    // Secondary tabs are styled with bootstrap pager CSS.
    $variables['#attached']['library'][] = 'dxpr_theme/drupal-pager';
  }
}

/**
 * Implements template_preprocess_block()
 */
function dxpr_theme_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    if ($block) {
      $variables['region'] = $block->getRegion();
    }
  }
  // Include DXPR Theme full search block css library.
  if ($variables['plugin_id'] === 'full_screen_search') {
    $variables['#attached']['library'][] = 'dxpr_theme/dxpr-theme-full-screen-search';
    $variables['#attached']['library'][] = 'dxpr_theme/dxpr-theme-full-screen-search-js';
  }
}

/**
 * Implements template_preprocess_links()
 */
function dxpr_theme_preprocess_links__language_block(&$variables) {
  $variables['attributes']['class'][] = 'nav';
  $variables['attributes']['class'][] = 'menu';
}

/**
 * Implements template_preprocess_region()
 */
function dxpr_theme_preprocess_region(&$variables) {
  switch ($variables['region']) {
    case 'secondary_header':
      $variables['#attached']['library'][] = 'dxpr_theme/dxpr-theme-secondary-header';
    case 'navigation':
    case 'navigation_collapsible':
      $variables['#attached']['library'][] = 'dxpr_theme/dxpr-theme-header';
      $variables['#attached']['library'][] = 'dxpr_theme/dxpr-theme-header--top';
      $variables['#attached']['library'][] = 'dxpr_theme/dxpr-theme-header--mobile';
      break;

    case 'footer':
      $variables['#attached']['library'][] = 'dxpr_theme/footer-menu';
      break;
  }
}

/**
 * Implements template_preprocess_breadcrumb()
 */
function dxpr_theme_preprocess_breadcrumb(&$variables) {
  // Remove 'Home' from breadcrumb trail.
  if (count($variables['breadcrumb'])) {
    array_shift($variables['breadcrumb']);
  }
  if (!empty($variables['breadcrumb'])) {
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

    if (!empty($page_title)) {
      $variables['breadcrumb'][] = [
        'text' => $page_title,
        'attributes' => new Attribute(['class' => ['active']]),
      ];
    }
    $variables['#attached']['library'][] = 'dxpr_theme/drupal-breadcrumbs';
    $variables['#attached']['library'][] = 'dxpr_theme/drupal-breadcrumbs-js';
  }
}

/**
 * Implements template_preprocess_comment()
 */
function dxpr_theme_preprocess_comment(&$variables) {
  if ($variables['elements']['#comment']) {
    $variables['#attached']['library'][] = 'bootstrap5/indented';
    $variables['#attached']['library'][] = 'dxpr_theme/drupal-comments';
  }
}

/**
 * Implements template_preprocess_pager()
 */
function dxpr_theme_preprocess_pager(&$variables) {
  $variables['#attached']['library'][] = 'dxpr_theme/drupal-pager';
}

/**
 * Implements template_preprocess_views_mini_pager()
 */
function dxpr_theme_preprocess_views_mini_pager(&$variables) {
  $variables['#attached']['library'][] = 'dxpr_theme/drupal-pager';
}

/**
 * Implements template_theme_suggestions_form_element_alter()
 */
function dxpr_theme_theme_suggestions_form_element_alter(array &$suggestions, array $variables, $hook) {
  if (isset($variables['element']['#type'])) {
    $id = str_replace("-", "_", $variables['element']['#type']);
    $suggestions[] = $hook . '__' . $id;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dxpr_theme_form_search_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['basic']['#attributes']['class'] = [
    0 => 'form-group',
    1 => 'input-group',
  ];
  $form['basic']['keys']['#placeholder'] = $form['basic']['keys']['#title'];
  unset($form['basic']['keys']['#title']);
  $form['basic']['submit']['#icon'] = TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dxpr_theme_form_search_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['#type'] = 'submit';
  $form['keys']['#placeholder'] = 'Search';
  $form['actions']['#icon'] = TRUE;
  unset($form['actions']['submit']);
}

/**
 * Implements template_preprocess_input()
 */
function dxpr_theme_preprocess_input(&$variables) {
  $element = $variables['element'];
  if (isset($element['#icon'])) {
    $variables['icon'] = $element['#icon'];
  }
  if (isset($element['#id'])) {
    if ($element['#id'] === 'full_screen_search') {
      $variables['icon'] = TRUE;
    }
  }
  $variables['#attached']['library'][] = 'dxpr_theme/drupal-search';
}

/**
 * Implements template_preprocess_status_messages().
 */
function dxpr_theme_preprocess_status_messages(&$variables) {
  $variables['#attached']['library'][] = 'dxpr_theme/drupal-status-message';
}

/**
 * Implements template_preprocess_details()
 */
function dxpr_theme_preprocess_details(&$variables) {
  $variables['attributes']['class'][] = 'form-item';
}

/**
 * Implements template_theme_suggestions_form_alter()
 */
function dxpr_theme_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
}







function dxpr_theme_preprocess_image_widget(array &$variables)
{
    $data = &$variables['data'];

    // This prevents image widget templates from rendering preview container HTML
    // to users that do not have permission to access these previews.
    // @todo revisit in https://drupal.org/node/953034
    // @todo revisit in https://drupal.org/node/3114318
    if (isset($data['preview']['#access']) && $data['preview']['#access'] === false) {
        unset($data['preview']);
    }
}


function dxpr_theme_preprocess_webform_element(&$variables)
{
    // Check if the element is an input element and not hidden.
    if ($variables['element']['#type'] == 'textfield' && empty($variables['element']['#type_hidden'])) {
        // Add the form-control class to the input element.
        $variables['attributes']['class'][] = 'form-control';
    }
}

function dxpr_theme_preprocess_node(&$variables) {


    if ($variables['node']->getType() == 'case_study') {
        $current_node_id = $variables['node']->id();

        // Get all categories of the current case study.
        $current_categories = [];
        foreach ($variables['node']->field_case_study_category as $term_ref) {
            $current_categories[] = $term_ref->target_id;
        }

        // Query for other case studies with matching categories.
        $query = \Drupal::database()->select('node_field_data', 'nfd');
        $query->fields('nfd', ['nid', 'title'])
              ->condition('nfd.type', 'case_study')
              ->condition('nfd.status', 1)
              ->condition('nfd.nid', $current_node_id, '!=')
              ->range(0, 5)
              ->orderBy('nfd.created', 'DESC');

        // Join the category field to match categories.
        $query->leftJoin('node__field_case_study_category', 'category', 'nfd.nid = category.entity_id');
        $query->fields('category', ['field_case_study_category_target_id'])
              ->condition('category.field_case_study_category_target_id', $current_categories, 'IN');

        // Execute the query and filter for unique case studies.
        $results = $query->execute()->fetchAll();

        $unique_case_studies = [];
        $unique_nids = [];
        foreach ($results as $result) {
            if (count($unique_case_studies) >= 2) {
                break; // Limit to 2 unique case studies.
            }
            if (!in_array($result->nid, $unique_nids)) {
                $unique_nids[] = $result->nid;
                $node = \Drupal\node\Entity\Node::load($result->nid);

                // Load all categories for the case study.
                $categories = [];
                foreach ($node->field_case_study_category as $term_ref) {
                    $categories[] = \Drupal\taxonomy\Entity\Term::load($term_ref->target_id);
                }

                $unique_case_studies[] = [
                    'node' => $node,
                    'categories' => $categories,
                ];
            }
        }

        // Assign the unique case studies to template variables.
        $variables['other_case_studies'] = $unique_case_studies;
    }
}





function dxpr_theme_preprocess_page(&$variables) {



$cache_id = 'menu_main_cache';
  
  // Log: Function execution started
  \Drupal::logger('dxpr_theme')->notice('dxpr_theme_preprocess_page() called.');

  // Try to fetch the menu from cache
  if ($cache = \Drupal::cache()->get($cache_id)) {
    \Drupal::logger('dxpr_theme')->notice('Menu found in cache.');
    $variables['menu_main'] = $cache->data;
    return;
  }

  // Log: Cache miss
  \Drupal::logger('dxpr_theme')->notice('Cache miss. Loading menu.');

  // Load the menu tree
  $menu_name = 'main'; // Change to your actual menu machine name
  $parameters = new MenuTreeParameters();
  $parameters->setMaxDepth(3);

  $menu_tree = \Drupal::menuTree()->load($menu_name, $parameters);

  if (!$menu_tree) {
    \Drupal::logger('dxpr_theme')->error('Failed to load menu: ' . $menu_name);
    return;
  }

  \Drupal::logger('dxpr_theme')->notice('Menu tree loaded successfully.');

  // Transform the tree using default manipulators
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];
  $menu_tree = \Drupal::menuTree()->transform($menu_tree, $manipulators);

  // Render the menu
  $menu_rendered = \Drupal::menuTree()->build($menu_tree);

  if (!$menu_rendered) {
    \Drupal::logger('dxpr_theme')->error('Menu rendering failed.');
    return;
  }

  \Drupal::logger('dxpr_theme')->notice('Menu rendered successfully.');

  // Cache for 1 hour
  \Drupal::cache()->set($cache_id, $menu_rendered, time() + 3600, ['menu:' . $menu_name]);
  \Drupal::logger('dxpr_theme')->notice('Menu cached successfully.');

  // Assign to template variables
  $variables['menu_main'] = Markup::create(\Drupal::service('renderer')->render($menu_rendered));

  \Drupal::logger('dxpr_theme')->notice('Menu passed to template.');
  
  
  
  


  // Load all articles sorted by 'created' field in descending order
  $weight_field = 'field_weight';

  $query = \Drupal::entityQuery('node')
    ->condition('type', 'article')
      ->sort($weight_field, 'DSC')
    ->sort('created', 'DESC')
    ->accessCheck(TRUE); // Add access check
  
  $nids = $query->execute();
  $articles = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($nids);
  
  $variables['articles'] = $articles;

  // Load only published jobs
  $nids_2 = \Drupal::database()->query('SELECT nid FROM {node_field_data} WHERE type = :job AND status = 1', [':job' => 'job'])->fetchCol();
  $jobs = \Drupal\node\Entity\Node::loadMultiple($nids_2);
  $variables['jobs'] = $jobs;

  // Load featured category articles
  $query = \Drupal::database()->select('node_field_data', 'nfd');
$query->fields('nfd', ['nid'])
      ->condition('nfd.type', 'article')
      ->condition('nfd.status', 1);

$query->join('node__field_category', 'nfc', 'nfd.nid = nfc.entity_id');
$query->join('taxonomy_term_field_data', 't', 'nfc.field_category_target_id = t.tid');
$query->condition('t.name', 'Featured', '=');

$nids_3 = $query->execute()->fetchCol(); // Fetch only NIDs

// LOG THE NIDS FOR DEBUGGING
// Load nodes
$featured_articles = \Drupal\node\Entity\Node::loadMultiple($nids_3);
$variables['featured_articles'] = $featured_articles;




  // Load all terms in the "Categories" vocabulary.
  $vid = 'categories'; // Replace with your vocabulary ID.
  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);

  // Convert terms to a more usable format for the template.
  $categories = [];
  foreach ($terms as $term) {
    $categories[] = [
      'id' => $term->tid,
      'name' => $term->name,
      'url' => Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $term->tid])->toString(),
    ];
  }

  // Pass categories to the template.
  $variables['categories'] = $categories;

  // Check if the current page is a taxonomy term page
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
    $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
    if ($term) {
      $variables['term_name'] = $term->getName();

      // Using SQL to fetch articles by taxonomy term (category)
      $sql_query = 'SELECT nfd.nid 
                    FROM {node_field_data} nfd
                    JOIN {node__field_category} nfc ON nfd.nid = nfc.entity_id
                    WHERE nfd.status = 1 AND nfc.field_category_target_id = :tid';

      // Prepare and execute the query
      $nids = \Drupal::database()->query($sql_query, [':tid' => $term->id()])->fetchCol();

      // Manually construct the interpolated SQL query for debugging
      $debug_sql_query = strtr($sql_query, [':tid' => $term->id()]);

      // Print the query for debugging
      $variables['debug_sql_query'] = $debug_sql_query;

      $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);
      $variables['node'] = $nodes;
    }
  }
  
 $current_path = \Drupal::service('path.current')->getPath();
  // Resolve the alias to the system path
  $alias_manager = \Drupal::service('path_alias.manager');
  $resolved_path = $alias_manager->getAliasByPath($current_path);

  $variables['footer_blue_latest'] = dxpr_theme_get_latest_footer_blue($resolved_path);
}



function dxpr_theme_get_latest_footer_blue($resolved_path) {
  // Dump resolved path for debugging
  // dump($resolved_path) ; 
  

  $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery()
    ->condition('type', 'footer_blue')
    ->condition('status', 1) // Only published nodes
    ->condition('field_display_on_page', $resolved_path) // Filter by resolved page path
    ->sort('created', 'DESC') // Sort by creation date descending
    ->range(0, 1) // Only one result
    ->accessCheck(TRUE); // Explicitly check access

  $nids = $query->execute();

  if (!empty($nids)) {
    $nid = reset($nids);
    $node = Node::load($nid);
    return [
      'title' => $node->getTitle(),
      'background_big_text' => $node->get('field_background_big_text')->value,
      'cta_link' => $node->get('field_cta_link')->value,
      'cta_text' => $node->get('field_cta_text')->value,
      
    ];
  }

  return [];
}
